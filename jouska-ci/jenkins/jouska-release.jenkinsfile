def RELEASE_SCOPE = params.RELEASE_SCOPE

def RELEASE_VERSION

node('JDK11') {

    stage('Checkout') {
        // for display purposes
        checkout(
                [$class: 'GitSCM', branches: [[name: 'origin/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '80614278-f55f-4f66-9787-ef033624e848', refspec: '', url: 'ssh://jenkins@gerrit.synisys.com:29418/techno-battle-jouska']]])
    }

    stage('Resolve new version') {
        def LAST_VERSION = sh(returnStdout: true, script: "git describe --tags --abbrev=0").trim()

        print("Last version tag: $LAST_VERSION")

        switch (RELEASE_SCOPE) {
            case 'patch':
                RELEASE_VERSION = LAST_VERSION.replaceAll(/\.\d*$/, '.' + (
                        (
                                LAST_VERSION.split("\\.")[2] as Integer) + 1))
                break
            case 'minor':
                RELEASE_VERSION = LAST_VERSION.replaceAll(/\.\d*\.\d*$/, '.' + (
                        (
                                LAST_VERSION.split("\\.")[1] as Integer) + 1) + '.0')
                break
            case 'major':
                RELEASE_VERSION = 'v' + ((LAST_VERSION.split("\\.")[0][1..-1] as Integer) + 1 + '.0.0')
                break
        }

        print("Release version: $RELEASE_VERSION")

        RELEASE_VERSION = RELEASE_VERSION.substring(1)

        sh("mvn versions:set -DnewVersion=$RELEASE_VERSION")
    }

    stage('Build') {
        sh 'mvn clean install'
    }

    stage('Server docker image') {
        def IMAGE_NAME = "regdb.synisys.com/com.synisys.fun/techno-jouska:$RELEASE_VERSION"
        print("Docker Image name: $IMAGE_NAME")

        sh "docker build -t $IMAGE_NAME ."
    }

    stage('Download Javafx Jmods') {
        dir('jouska-ci/target/javafx') {
            //            sh 'curl https://download2.gluonhq.com/openjfx/14/openjfx-14_windows-x64_bin-jmods.zip --output windows.zip'
            //            sh 'unzip linux.zip -d ./linux'

            sh 'curl https://download2.gluonhq.com/openjfx/14/openjfx-14_linux-x64_bin-jmods.zip --output linux.zip'
            sh 'unzip linux.zip -d ./linux'
        }
    }

    stage('Build Client') {
        def jdkPath = sh(returnStdout: true, script: 'echo $JAVA_HOME').trim()
        def javaFxJmodsPath = "jouska-ci/target/javafx/linux"
        sh "sh jouska-ci/unix/linux/linux-build.sh $jdkPath $javaFxJmodsPath"

        archiveArtifacts artifacts: "jouska-client/target/jouska-linux-setup.run",
                fingerprint: true
    }
}
