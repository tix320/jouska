def RELEASE_SCOPE = params.RELEASE_SCOPE

def RELEASE_VERSION

def JDK_PATH_PREFIX = '/opt/jdk'
def JAVAFX_PATH_PREFIX = '/opt/javafx'

node('JAVAFX') {

    stage('Checkout') {
        // for display purposes
        checkout(
                [$class: 'GitSCM', branches: [[name: 'origin/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '80614278-f55f-4f66-9787-ef033624e848', refspec: '', url: 'ssh://jenkins@gerrit.synisys.com:29418/techno-battle-jouska']]])
    }

    stage('Resolve new version') {
        def LAST_VERSION = sh(returnStdout: true, script: "git describe --tags --abbrev=0").trim()

        print("Last version tag: $LAST_VERSION")

        switch (RELEASE_SCOPE) {
            case 'patch':
                RELEASE_VERSION = LAST_VERSION.replaceAll(/\.\d*$/, '.' + (
                        (
                                LAST_VERSION.split("\\.")[2] as Integer) + 1))
                break
            case 'minor':
                RELEASE_VERSION = LAST_VERSION.replaceAll(/\.\d*\.\d*$/, '.' + (
                        (
                                LAST_VERSION.split("\\.")[1] as Integer) + 1) + '.0')
                break
            case 'major':
                RELEASE_VERSION = 'v' + ((LAST_VERSION.split("\\.")[0][1..-1] as Integer) + 1 + '.0.0')
                break
        }

        print("Release version: $RELEASE_VERSION")

        RELEASE_VERSION = RELEASE_VERSION.substring(1)

        sh("mvn versions:set -DnewVersion=$RELEASE_VERSION")
    }

    stage('Build') {
        sh 'mvn clean install'
    }

    stage('Build Server Image') {
        def IMAGE_NAME = "regdb.synisys.com/com.synisys.fun/techno-jouska:$RELEASE_VERSION"
        print("Docker Image name: $IMAGE_NAME")

        sh "docker -H swarm-manager:4000 build -t $IMAGE_NAME ."
    }

    stage('Build Linux Client') {
        def jdkPath = "$JDK_PATH_PREFIX/linux"
        def javaFxJmodsPath = "$JAVAFX_PATH_PREFIX/linux"
        sh "sh jouska-ci/build/unix/linux/linux-build.sh $jdkPath $javaFxJmodsPath"

        archiveArtifacts artifacts: "jouska-client/target/output/jouska-linux-setup.sh",
                fingerprint: true
    }

    stage('Build Mac Client') {
        def jdkPath = "$JDK_PATH_PREFIX/mac"
        def javaFxJmodsPath = "$JAVAFX_PATH_PREFIX/mac"
        sh "sh jouska-ci/build/unix/mac/mac-build.sh $jdkPath $javaFxJmodsPath"

        archiveArtifacts artifacts: "jouska-client/target/output/jouska-mac-setup.sh",
                fingerprint: true
    }

    stage('Build Windows Client') {
        def jdkPath = "$JDK_PATH_PREFIX/windows"
        def javaFxJmodsPath = "$JAVAFX_PATH_PREFIX/windows"
        sh "sh jouska-ci/build/windows/windows-build.sh $jdkPath $javaFxJmodsPath"

        archiveArtifacts artifacts: "jouska-client/target/output/jouska-windows.zip",
                fingerprint: true
    }

    stage('Push') {
        sh 'git add .'
        sh "git commit -m \"Update version to $RELEASE_VERSION\""
        sh "git push origin master"

        sh "git tag ${RELEASE_VERSION}"
        sh "git push origin ${RELEASE_VERSION}"
    }
}
